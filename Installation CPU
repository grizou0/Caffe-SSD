Testé OK.
Reference:
---------
https://www.youtube.com/watch?v=DnIs4DRjNL4   pour installation mode CPU
https://chunml.github.io/ChunML.github.io/project/Installing-Caffe-Ubuntu/   pour installation
Ref:caffe framework
caffe.berkeleyvision.org
installation->ubuntu 16.04 instruction
https://github.com/weiliu89/caffe/tree/ssd
https://github.com/grizou0/Caffe-SSD/tree/master
http://caffe.berkeleyvision.org/installation.html
------------------------------------------------------------------------------------------------------
Apres de long essais , j'ai enfin trouver la solution pour installer correctement
le modele caffe.
Dans un premier temps, on install caffe sous ubuntu16.04 en mode CPU.
On ajoute ensuite les modules désirés.
Ubuntu16.04 en mode CPU ne fonctionne pas. Seul le mode GPU (CUDA) fonctionne.
On ajoutera CUDA après.

Installation mode CPU
---------------------
Installation des dépendances
-----------------------------
sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler
sudo apt-get install --no-install-recommends libboost-all-dev

Installation BLAS
-----------------
sudo apt-get install libatlas-base-dev
sudo apt-get install python
sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev
sudo apt-get install python-pip


    sudo apt-get update
    sudo apt-get install git

se placer dans la racine home/xx/
git clone https://github.com/BVLC/caffe.git
cd caffe
find -name requirements.txt
         ./python/requirements.txt
         ./examples/web_demo/requirements.txt
cd python
for req in $(cat requirements.txt); do sudo pip install $req; done
cd ..
python -m site
->
  sys.path = [
      '/home/jp/caffe/python',
      '/usr/lib/python2.7',
      '/usr/lib/python2.7/plat-x86_64-linux-gnu',
      '/usr/lib/python2.7/lib-tk',
      '/usr/lib/python2.7/lib-old',
      '/usr/lib/python2.7/lib-dynload',
      '/home/jp/.local/lib/python2.7/site-packages',
      '/usr/local/lib/python2.7/dist-packages',
      '/usr/lib/python2.7/dist-packages',
]
  USER_BASE: '/home/jp/.local' (exists)
  USER_SITE: '/home/jp/.local/lib/python2.7/site-packages' (exists)
  ENABLE_USER_SITE: True
-------------------------------
Caffe peut etre compiler par cmake (communauté), ou par Make (Makefile)
cp Makefile.config.example Makefile.config
Recherche Path librairies:

jp@jp-G750JH://$ find /usr -name hdf5
/usr/include/hdf5
/usr/lib/x86_64-linux-gnu/hdf5


nano Makefile.config
->modifier:(voir référence Makefile.config en dessous)

CPU_ONLY :=1

# Uncomment if you're using OpenCV 3
OPENCV_VERSION := 3 # obligatoire si opencv >2 est installé. Dans mon cas j'ai opencv-3.4.0
                    # sinon laisser le "#"

....
# NOTE: this is required only if you will compile the python interface.
# We need to be able to find Python.h and numpy/arrayobject.h.
PYTHON_INCLUDE := /usr/include/python2.7 \
                 /home/jp/.local/lib/python2.7/site-packages/numpy/core/include
....
# Uncomment to support layers written in Python (will link against Python libs)
WITH_PYTHON_LAYER := 1
.....
# Whatever else you find you need goes here.
INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial/
LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/x86_64-linux-gnu/hdf5/serial/
...

make all
make test
make runtest

[----------] Global test environment tear-down
[==========] 1162 tests from 152 test cases ran. (41557 ms total)
[  PASSED  ] 1162 tests.

-----------------------------------------
Configuration python
--------------------
Suivant python/requirements.txt 
pip install pydot
sudo apt-get install graphviz
sudo apt-get install python-matplotlib python-numpy python-pil python-scipy
sudo apt-get install build-essential cython
sudo apt-get install python-skimage

make pycaffe
make pytest
 -> 
I0103 20:11:49.527552 31529 layer_factory.hpp:77] Creating layer input
I0103 20:11:49.527559 31529 net.cpp:86] Creating Layer input
I0103 20:11:49.527562 31529 net.cpp:382] input -> data
I0103 20:11:49.527570 31529 net.cpp:124] Setting up input
I0103 20:11:49.527573 31529 net.cpp:131] Top shape: 10 9 8 (720)
I0103 20:11:49.527577 31529 net.cpp:139] Memory required for data: 2880
I0103 20:11:49.527581 31529 layer_factory.hpp:77] Creating layer mul10
I0103 20:11:49.527599 31529 net.cpp:86] Creating Layer mul10
I0103 20:11:49.527603 31529 net.cpp:408] mul10 <- data
I0103 20:11:49.527608 31529 net.cpp:382] mul10 -> mul10
I0103 20:11:49.527631 31529 net.cpp:124] Setting up mul10
I0103 20:11:49.527637 31529 net.cpp:131] Top shape: 10 9 8 (720)
I0103 20:11:49.527639 31529 net.cpp:139] Memory required for data: 5760
I0103 20:11:49.527642 31529 layer_factory.hpp:77] Creating layer mul2
I0103 20:11:49.527655 31529 net.cpp:86] Creating Layer mul2
I0103 20:11:49.527659 31529 net.cpp:408] mul2 <- mul10
I0103 20:11:49.527664 31529 net.cpp:382] mul2 -> mul2
I0103 20:11:49.527681 31529 net.cpp:124] Setting up mul2
I0103 20:11:49.527686 31529 net.cpp:131] Top shape: 10 9 8 (720)
I0103 20:11:49.527689 31529 net.cpp:139] Memory required for data: 8640
I0103 20:11:49.527693 31529 net.cpp:202] mul2 does not need backward computation.
I0103 20:11:49.527696 31529 net.cpp:202] mul10 does not need backward computation.
I0103 20:11:49.527699 31529 net.cpp:202] input does not need backward computation.
I0103 20:11:49.527703 31529 net.cpp:244] This network produces output mul2
I0103 20:11:49.527707 31529 net.cpp:257] Network initialization done.
..
----------------------------------------------------------------------
Ran 52 tests in 7.872s

OK
Une derniere chose, ajouter le PATH caffe au Python:
sudo nano ~/.bashrc
export PYTHONPATH=/home/jp/caffe/python
source ~/.bashrc

On verifie 
python
>>import caffe
--------------------------------------------------------------------------
Caffe est ok en mode CPU
Voici le fichier Makefile.config conmplet:
***************** Ne pas oublier de changer le nom dans chaque PATH ***********************************
*******************************************************************************************************
## Refer to http://caffe.berkeleyvision.org/installation.html
# Contributions simplifying and improving our build system are welcome!

# cuDNN acceleration switch (uncomment to build with cuDNN).
# USE_CUDNN := 1

# CPU-only switch (uncomment to build without GPU support).
CPU_ONLY := 1

# uncomment to disable IO dependencies and corresponding data layers
# USE_OPENCV := 0
# USE_LEVELDB := 0
# USE_LMDB := 0
# This code is taken from https://github.com/sh1r0/caffe-android-lib
# USE_HDF5 := 0

# uncomment to allow MDB_NOLOCK when reading LMDB files (only if necessary)
#	You should not set this flag if you will be reading LMDBs with any
#	possibility of simultaneous read and write
# ALLOW_LMDB_NOLOCK := 1

# Uncomment if you're using OpenCV 3
# OPENCV_VERSION := 3 #enlever le "#e que si une versvio opencv 3 ou plus est installée, même si on n'utilise pas (USE_OPENCV)

# To customize your choice of compiler, uncomment and set the following.
# N.B. the default for Linux is g++ and the default for OSX is clang++
# CUSTOM_CXX := g++

# CUDA directory contains bin/ and lib/ directories that we need.
CUDA_DIR := /usr/local/cuda
# On Ubuntu 14.04, if cuda tools are installed via
# "sudo apt-get install nvidia-cuda-toolkit" then use this instead:
# CUDA_DIR := /usr

# CUDA architecture setting: going with all of them.
# For CUDA < 6.0, comment the *_50 through *_61 lines for compatibility.
# For CUDA < 8.0, comment the *_60 and *_61 lines for compatibility.
# For CUDA >= 9.0, comment the *_20 and *_21 lines for compatibility.
CUDA_ARCH := -gencode arch=compute_20,code=sm_20 \
		-gencode arch=compute_20,code=sm_21 \
		-gencode arch=compute_30,code=sm_30 \
		-gencode arch=compute_35,code=sm_35 \
		-gencode arch=compute_50,code=sm_50 \
		-gencode arch=compute_52,code=sm_52 \
		-gencode arch=compute_60,code=sm_60 \
		-gencode arch=compute_61,code=sm_61 \
		-gencode arch=compute_61,code=compute_61

# BLAS choice:
# atlas for ATLAS (default)
# mkl for MKL
# open for OpenBlas
BLAS := atlas
# Custom (MKL/ATLAS/OpenBLAS) include and lib directories.
# Leave commented to accept the defaults for your choice of BLAS
# (which should work)!
# BLAS_INCLUDE := /path/to/your/blas
# BLAS_LIB := /path/to/your/blas

# Homebrew puts openblas in a directory that is not on the standard search path
# BLAS_INCLUDE := $(shell brew --prefix openblas)/include
# BLAS_LIB := $(shell brew --prefix openblas)/lib

# This is required only if you will compile the matlab interface.
# MATLAB directory should contain the mex binary in /bin.
# MATLAB_DIR := /usr/local
# MATLAB_DIR := /Applications/MATLAB_R2012b.app

# NOTE: this is required only if you will compile the python interface.
# We need to be able to find Python.h and numpy/arrayobject.h.
PYTHON_INCLUDE := /usr/include/python2.7 \
                 /home/jp/.local/lib/python2.7/site-packages/numpy/core/include
# Anaconda Python distribution is quite popular. Include path:
# Verify anaconda location, sometimes it's in root.
# ANACONDA_HOME := $(HOME)/anaconda
# PYTHON_INCLUDE := $(ANACONDA_HOME)/include \
		# $(ANACONDA_HOME)/include/python2.7 \
		# $(ANACONDA_HOME)/lib/python2.7/site-packages/numpy/core/include

# Uncomment to use Python 3 (default is Python 2)
# PYTHON_LIBRARIES := boost_python3 python3.5m
# PYTHON_INCLUDE := /usr/include/python3.5m \
#                 /usr/lib/python3.5/dist-packages/numpy/core/include

# We need to be able to find libpythonX.X.so or .dylib.
PYTHON_LIB := /usr/lib
# PYTHON_LIB := $(ANACONDA_HOME)/lib

# Homebrew installs numpy in a non standard path (keg only)
# PYTHON_INCLUDE += $(dir $(shell python -c 'import numpy.core; print(numpy.core.__file__)'))/include
# PYTHON_LIB += $(shell brew --prefix numpy)/lib

# Uncomment to support layers written in Python (will link against Python libs)
WITH_PYTHON_LAYER := 1

# Whatever else you find you need goes here.
INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial/
LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/x86_64-linux-gnu/hdf5/serial/

# If Homebrew is installed at a non standard location (for example your home directory) and you use it for general dependencies
# INCLUDE_DIRS += $(shell brew --prefix)/include
# LIBRARY_DIRS += $(shell brew --prefix)/lib

# NCCL acceleration switch (uncomment to build with NCCL)
# https://github.com/NVIDIA/nccl (last tested version: v1.2.3-1+cuda8.0)
# USE_NCCL := 1

# Uncomment to use `pkg-config` to specify OpenCV library paths.
# (Usually not necessary -- OpenCV libraries are normally installed in one of the above $LIBRARY_DIRS.)
# USE_PKG_CONFIG := 1

# N.B. both build and distribute dirs are cleared on `make clean`
BUILD_DIR := build
DISTRIBUTE_DIR := distribute

# Uncomment for debugging. Does not work on OSX due to https://github.com/BVLC/caffe/issues/171
# DEBUG := 1

# The ID of the GPU that 'make runtest' will use to run unit tests.
TEST_GPUID := 0

# enable pretty build (comment to see full commands)
Q ?= @
--------------------------------------------------------------------------------------------------------------
Pour l'installation en mpode GPU (obligatoire avec ubuntu 16.04),Cuda doit être installé.
